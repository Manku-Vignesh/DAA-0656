#include <stdio.h>
#define MAX 100
void strassen(int n, int A[][MAX], int B[][MAX], int C[][MAX]);
void add(int n, int A[][MAX], int B[][MAX], int C[][MAX]) {
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            C[i][j] = A[i][j] + B[i][j];
}
void subtract(int n, int A[][MAX], int B[][MAX], int C[][MAX]) {
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            C[i][j] = A[i][j] - B[i][j];
}
void multiply(int n, int A[][MAX], int B[][MAX], int C[][MAX]) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            C[i][j] = 0;
            for (int k = 0; k < n; k++)
                C[i][j] += A[i][k] * B[k][j];
        }
    }
}
void divide(int n, int A[][MAX], int B[][MAX], int row, int col) {
    for (int i1 = 0, i2 = row; i1 < n; i1++, i2++) {
        for (int j1 = 0, j2 = col; j1 < n; j1++, j2++) {
            B[i1][j1] = A[i2][j2];
        }
    }
}
void merge(int n, int A[][MAX], int B[][MAX], int row, int col) {
    for (int i1 = 0, i2 = row; i1 < n; i1++, i2++) {
        for (int j1 = 0, j2 = col; j1 < n; j1++, j2++) {
            A[i2][j2] = B[i1][j1];
        }
    }
}
void strassen(int n, int A[][MAX], int B[][MAX], int C[][MAX]) {
    if (n == 1) {
        C[0][0] = A[0][0] * B[0][0];
        return;
    }
    int mid = n / 2;
    int A11[MAX][MAX], A12[MAX][MAX], A21[MAX][MAX], A22[MAX][MAX];
    int B11[MAX][MAX], B12[MAX][MAX], B21[MAX][MAX], B22[MAX][MAX];
    int C11[MAX][MAX], C12[MAX][MAX], C21[MAX][MAX], C22[MAX][MAX];
    int M1[MAX][MAX], M2[MAX][MAX], M3[MAX][MAX], M4[MAX][MAX], M5[MAX][MAX], M6[MAX][MAX], M7[MAX][MAX];
    int temp1[MAX][MAX], temp2[MAX][MAX];
    divide(mid, A, A11, 0, 0);
    divide(mid, A, A12, 0, mid);
    divide(mid, A, A21, mid, 0);
    divide(mid, A, A22, mid, mid);
    divide(mid, B, B11, 0, 0);
    divide(mid, B, B12, 0, mid);
    divide(mid, B, B21, mid, 0);
    divide(mid, B, B22, mid, mid);
    add(mid, A11, A22, temp1); 
    add(mid, B11, B22, temp2); 
    strassen(mid, temp1, temp2, M1); 
    add(mid, A21, A22, temp1); 
    strassen(mid, temp1, B11, M2); 
    subtract(mid, B12, B22, temp1); 
    strassen(mid, A11, temp1, M3); 
    subtract(mid, B21, B11, temp1); 
    strassen(mid, A22, temp1, M4); 
    add(mid, A11, A12, temp1); 
    strassen(mid, temp1, B22, M5); 
    subtract(mid, A21, A11, temp1); 
    add(mid, B11, B12, temp2); 
    strassen(mid, temp1, temp2, M6); 
    subtract(mid, A12, A22, temp1); 
    add(mid, B21, B22, temp2); 
    strassen(mid, temp1, temp2, M7); 
    add(mid, M1, M4, temp1); 
    subtract(mid, temp1, M5, temp2); 
    add(mid, temp2, M7, C11); 
    add(mid, M3, M5, C12); 
    add(mid, M2, M4, C21); 
    add(mid, M1, M3, temp1); // M1 + M3
    subtract(mid, temp1, M2, temp2); // M1 + M3 - M2
    add(mid, temp2, M6, C22); // C22 = M1 + M3 - M2 + M6
    merge(mid, C, C11, 0, 0);
    merge(mid, C, C12, 0, mid);
    merge(mid, C, C21, mid, 0);
    merge(mid, C, C22, mid, mid);
}
void displayMatrix(int n, int matrix[][MAX]) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            printf("%d\t", matrix[i][j]);
        }
        printf("\n");
    }
}
int main() {
    char name[] = "M.Vignesh";
    char regno[] = "192211849";
    printf("Name : %s\n", name);
    printf("Regno : %s\n\n", regno);
    int n;
    printf("Enter the dimension of the matrices (must be a power of 2): ");
    scanf("%d", &n);
    int A[MAX][MAX], B[MAX][MAX], C[MAX][MAX];
    printf("Enter Matrix A (%d x %d):\n", n, n);
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            scanf("%d", &A[i][j]);
    printf("\nEnter Matrix B (%d x %d):\n", n, n);
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            scanf("%d", &B[i][j]);
    strassen(n, A, B, C);
    printf("\nResultant Matrix C (%d x %d) after Strassen's multiplication:\n", n, n);
    displayMatrix(n, C);
    return 0;
}
